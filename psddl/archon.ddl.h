#ifndef PDS_ARCHON_DDL_H
#define PDS_ARCHON_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include <cstddef>
#include <cstring>
#include "pdsdata/xtc/TypeId.hh"
#include "ndarray/ndarray.h"
namespace Pds {
namespace Archon {

/** @class ConfigV1

  Class containing configuration data for CCDs using the Archon controller.
*/


class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_ArchonConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  enum { FILENAME_CHAR_MAX = 256 };
  ConfigV1(const char* arg__config);
  ConfigV1() {}
  ConfigV1(const ConfigV1& other) {
    const char* src = reinterpret_cast<const char*>(&other);
    std::copy(src, src+other._sizeof(), reinterpret_cast<char*>(this));
  }
  ConfigV1& operator=(const ConfigV1& other) {
    const char* src = reinterpret_cast<const char*>(&other);
    std::copy(src, src+other._sizeof(), reinterpret_cast<char*>(this));
    return *this;
  }
  /** The path to an acf file to use with the camera. */
  const char* config() const { return _config; }
  static uint32_t _sizeof() { return ((((0+(1*(FILENAME_CHAR_MAX)))+1)-1)/1)*1; }
private:
  char	_config[FILENAME_CHAR_MAX];	/**< The path to an acf file to use with the camera. */
};
} // namespace Archon
} // namespace Pds
#endif // PDS_ARCHON_DDL_H
