#ifndef PDS_TPRDS_DDL_H
#define PDS_TPRDS_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include <cstddef>
#include <cstring>
#include "pdsdata/xtc/TypeId.hh"
#include "ndarray/ndarray.h"
namespace Pds {
namespace TprDSData {

/** @class ConfigV1

  
*/


class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_TprDSConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  ConfigV1(uint32_t arg__dataSize, uint32_t arg__fullThreshold);
  ConfigV1() {}
  ConfigV1(const ConfigV1& other) {
    const char* src = reinterpret_cast<const char*>(&other);
    std::copy(src, src+other._sizeof(), reinterpret_cast<char*>(this));
  }
  ConfigV1& operator=(const ConfigV1& other) {
    const char* src = reinterpret_cast<const char*>(&other);
    std::copy(src, src+other._sizeof(), reinterpret_cast<char*>(this));
    return *this;
  }
  uint32_t dataSize() const { return _dataSize; }
  uint32_t fullThreshold() const { return _fullThreshold; }
  static uint32_t _sizeof() { return 8; }
private:
  uint32_t	_dataSize;
  uint32_t	_fullThreshold;
};
} // namespace TprDSData
} // namespace Pds
#endif // PDS_TPRDS_DDL_H
