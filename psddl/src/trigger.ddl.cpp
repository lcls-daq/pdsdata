
// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/psddl/trigger.ddl.h"

#include <iostream>
namespace Pds {
namespace TriggerData {
std::ostream& operator<<(std::ostream& str, TriggerData::L0SelectV1::RateSelect enval) {
  const char* val;
  switch (enval) {
  case TriggerData::L0SelectV1::_FixedRate:
    val = "_FixedRate";
    break;
  case TriggerData::L0SelectV1::_PowerSyncRate:
    val = "_PowerSyncRate";
    break;
  case TriggerData::L0SelectV1::_ControlSequence:
    val = "_ControlSequence";
    break;
  case TriggerData::L0SelectV1::_Partition:
    val = "_Partition";
    break;
  default:
    return str << "RateSelect(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, TriggerData::L0SelectV1::Destination enval) {
  const char* val;
  switch (enval) {
  case TriggerData::L0SelectV1::_HXU:
    val = "_HXU";
    break;
  case TriggerData::L0SelectV1::_SXU:
    val = "_SXU";
    break;
  case TriggerData::L0SelectV1::_DumpBsy:
    val = "_DumpBsy";
    break;
  case TriggerData::L0SelectV1::_DiagLine:
    val = "_DiagLine";
    break;
  case TriggerData::L0SelectV1::_Reserved4:
    val = "_Reserved4";
    break;
  case TriggerData::L0SelectV1::_Reserved5:
    val = "_Reserved5";
    break;
  case TriggerData::L0SelectV1::_Reserved6:
    val = "_Reserved6";
    break;
  case TriggerData::L0SelectV1::_Reserved7:
    val = "_Reserved7";
    break;
  case TriggerData::L0SelectV1::_Reserved8:
    val = "_Reserved8";
    break;
  case TriggerData::L0SelectV1::_Reserved9:
    val = "_Reserved9";
    break;
  case TriggerData::L0SelectV1::_Reserved10:
    val = "_Reserved10";
    break;
  case TriggerData::L0SelectV1::_Reserved11:
    val = "_Reserved11";
    break;
  case TriggerData::L0SelectV1::_Reserved12:
    val = "_Reserved12";
    break;
  case TriggerData::L0SelectV1::_Reserved13:
    val = "_Reserved13";
    break;
  case TriggerData::L0SelectV1::_Reserved14:
    val = "_Reserved14";
    break;
  case TriggerData::L0SelectV1::_Reserved15:
    val = "_Reserved15";
    break;
  case TriggerData::L0SelectV1::_None:
    val = "_None";
    break;
  case TriggerData::L0SelectV1::_DontCare:
    val = "_DontCare";
    break;
  default:
    return str << "Destination(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, TriggerData::L0SelectV1::FixedRate enval) {
  const char* val;
  switch (enval) {
  case TriggerData::L0SelectV1::_1MHz:
    val = "_1MHz";
    break;
  case TriggerData::L0SelectV1::_500kHz:
    val = "_500kHz";
    break;
  case TriggerData::L0SelectV1::_200kHz:
    val = "_200kHz";
    break;
  case TriggerData::L0SelectV1::_100kHz:
    val = "_100kHz";
    break;
  case TriggerData::L0SelectV1::_10kHz:
    val = "_10kHz";
    break;
  case TriggerData::L0SelectV1::_1kHz:
    val = "_1kHz";
    break;
  case TriggerData::L0SelectV1::_100Hz:
    val = "_100Hz";
    break;
  case TriggerData::L0SelectV1::_10Hz:
    val = "_10Hz";
    break;
  case TriggerData::L0SelectV1::_1Hz:
    val = "_1Hz";
    break;
  case TriggerData::L0SelectV1::_NotFixedRate:
    val = "_NotFixedRate";
    break;
  default:
    return str << "FixedRate(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, TriggerData::L0SelectV1::PowerSyncRate enval) {
  const char* val;
  switch (enval) {
  case TriggerData::L0SelectV1::_AC60Hz:
    val = "_AC60Hz";
    break;
  case TriggerData::L0SelectV1::_AC30Hz:
    val = "_AC30Hz";
    break;
  case TriggerData::L0SelectV1::_AC10Hz:
    val = "_AC10Hz";
    break;
  case TriggerData::L0SelectV1::_AC5Hz:
    val = "_AC5Hz";
    break;
  case TriggerData::L0SelectV1::_AC1Hz:
    val = "_AC1Hz";
    break;
  case TriggerData::L0SelectV1::_NotPowerSyncRate:
    val = "_NotPowerSyncRate";
    break;
  default:
    return str << "PowerSyncRate(" << int(enval) << ")";
  }
  return str << val;
}
ConfigV1::ConfigV1(uint32_t arg__nModules, uint32_t arg__nPartitions, const TriggerData::ModuleV1* arg__modules, const TriggerData::L0SelectV1* arg__l0Select)
    : _nModules(arg__nModules), _nPartitions(arg__nPartitions)
{
  if (arg__modules and (this->_nModules)) {
    ptrdiff_t offset = 8;
    TriggerData::ModuleV1* data = reinterpret_cast<TriggerData::ModuleV1*>(((char*)this)+offset);
    std::copy(arg__modules, arg__modules+(this->_nModules), data);
  }
  if (arg__l0Select and (this->_nPartitions)) {
    ptrdiff_t offset = 8+(144*(this->_nModules));
    TriggerData::L0SelectV1* data = reinterpret_cast<TriggerData::L0SelectV1*>(((char*)this)+offset);
    std::copy(arg__l0Select, arg__l0Select+(this->_nPartitions), data);
  }
}
} // namespace TriggerData
} // namespace Pds
