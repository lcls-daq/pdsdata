
// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/psddl/jungfrau.ddl.h"

#include <iostream>
namespace Pds {
namespace Jungfrau {
ConfigV1::ConfigV1(uint32_t arg__numberOfModules, uint32_t arg__numberOfRowsPerModule, uint32_t arg__numberOfColumnsPerModule, uint32_t arg__biasVoltage, Jungfrau::ConfigV1::GainMode arg__gainMode, Jungfrau::ConfigV1::SpeedMode arg__speedMode, double arg__triggerDelay, double arg__exposureTime)
    : _numberOfModules(arg__numberOfModules), _numberOfRowsPerModule(arg__numberOfRowsPerModule), _numberOfColumnsPerModule(arg__numberOfColumnsPerModule), _biasVoltage(arg__biasVoltage), _gainMode(arg__gainMode), _speedMode(arg__speedMode), _triggerDelay(arg__triggerDelay), _exposureTime(arg__exposureTime)
{
}
uint32_t
ConfigV1::frameSize() const {
  return 12 + this->numPixels()*2;
}
std::ostream& operator<<(std::ostream& str, Jungfrau::ConfigV1::GainMode enval) {
  const char* val;
  switch (enval) {
  case Jungfrau::ConfigV1::Normal:
    val = "Normal";
    break;
  case Jungfrau::ConfigV1::FixedGain1:
    val = "FixedGain1";
    break;
  case Jungfrau::ConfigV1::FixedGain2:
    val = "FixedGain2";
    break;
  case Jungfrau::ConfigV1::ForcedGain1:
    val = "ForcedGain1";
    break;
  case Jungfrau::ConfigV1::ForcedGain2:
    val = "ForcedGain2";
    break;
  case Jungfrau::ConfigV1::HighGain0:
    val = "HighGain0";
    break;
  default:
    return str << "GainMode(" << int(enval) << ")";
  }
  return str << val;
}
std::ostream& operator<<(std::ostream& str, Jungfrau::ConfigV1::SpeedMode enval) {
  const char* val;
  switch (enval) {
  case Jungfrau::ConfigV1::Quarter:
    val = "Quarter";
    break;
  case Jungfrau::ConfigV1::Half:
    val = "Half";
    break;
  default:
    return str << "SpeedMode(" << int(enval) << ")";
  }
  return str << val;
}
} // namespace Jungfrau
} // namespace Pds
