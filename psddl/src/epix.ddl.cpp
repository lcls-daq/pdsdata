
// *** Do not edit this file, it is auto-generated ***

#include "pdsdata/psddl/epix.ddl.h"

#include <iostream>
namespace Pds {
namespace Epix {
AsicConfigV1::AsicConfigV1(uint8_t arg__monostPulser, uint8_t arg__dummyTest, uint8_t arg__dummyMask, uint16_t arg__pulser, uint8_t arg__pbit, uint8_t arg__atest, uint8_t arg__test, uint8_t arg__sabTest, uint8_t arg__hrTest, uint8_t arg__digMon1, uint8_t arg__digMon2, uint8_t arg__pulserDac, uint8_t arg__Dm1En, uint8_t arg__Dm2En, uint8_t arg__slvdSBit, uint8_t arg__VRefDac, uint8_t arg__TpsTComp, uint8_t arg__TpsMux, uint8_t arg__RoMonost, uint8_t arg__TpsGr, uint8_t arg__S2dGr, uint8_t arg__PpOcbS2d, uint8_t arg__Ocb, uint8_t arg__Monost, uint8_t arg__FastppEnable, uint8_t arg__Preamp, uint8_t arg__PixelCb, uint8_t arg__S2dTComp, uint8_t arg__FilterDac, uint8_t arg__TC, uint8_t arg__S2d, uint8_t arg__S2dDacBias, uint8_t arg__TpsTcDac, uint8_t arg__TpsDac, uint8_t arg__S2dTcDac, uint8_t arg__S2dDac, uint8_t arg__TestBe, uint8_t arg__IsEn, uint8_t arg__DelExec, uint8_t arg__DelCckReg, uint16_t arg__RowStartAddr, uint16_t arg__RowStopAddr, uint8_t arg__ColStartAddr, uint8_t arg__ColStopAddr, uint16_t arg__chipID)
    : _reg1(((arg__monostPulser) & 0x7)), _reg2(((arg__dummyTest) & 0x1)|(((arg__dummyMask) & 0x1)<<1)), _reg3(((arg__pulser) & 0x3ff)|(((arg__pbit) & 0x1)<<10)|(((arg__atest) & 0x1)<<11)|(((arg__test) & 0x1)<<12)|(((arg__sabTest) & 0x1)<<13)|(((arg__hrTest) & 0x1)<<14)), _reg4(((arg__digMon1) & 0xf)|(((arg__digMon2) & 0xf)<<4)), _reg5(((arg__pulserDac) & 0x7)), _reg6(((arg__Dm1En) & 0x1)|(((arg__Dm2En) & 0x1)<<1)|(((arg__slvdSBit) & 0x1)<<4)), _reg7(((arg__VRefDac) & 0x3f)), _reg8(((arg__TpsTComp) & 0x1)|(((arg__TpsMux) & 0xf)<<1)|(((arg__RoMonost) & 0x7)<<5)), _reg9(((arg__TpsGr) & 0xf)|(((arg__S2dGr) & 0xf)<<4)), _reg10(((arg__PpOcbS2d) & 0x1)|(((arg__Ocb) & 0x7)<<1)|(((arg__Monost) & 0x7)<<4)|(((arg__FastppEnable) & 0x1)<<7)), _reg11(((arg__Preamp) & 0x7)|(((arg__PixelCb) & 0x7)<<4)), _reg12(((arg__S2dTComp) & 0x1)|(((arg__FilterDac) & 0x3f)<<1)), _reg13(((arg__TC) & 0x3)|(((arg__S2d) & 0x7)<<2)|(((arg__S2dDacBias) & 0x7)<<5)), _reg14(((arg__TpsTcDac) & 0x3)|(((arg__TpsDac) & 0x3f)<<2)), _reg15(((arg__S2dTcDac) & 0x3)|(((arg__S2dDac) & 0x3f)<<2)), _reg16(((arg__TestBe) & 0x1)|(((arg__IsEn) & 0x1)<<1)|(((arg__DelExec) & 0x1)<<2)|(((arg__DelCckReg) & 0x1)<<3)), _reg17(((arg__RowStartAddr) & 0x1ff)), _reg18(((arg__RowStopAddr) & 0x1ff)), _reg19(((arg__ColStartAddr) & 0x7f)), _reg20(((arg__ColStopAddr) & 0x7f)), _reg21(((arg__chipID) & 0xffff))
{
}
ConfigV1::ConfigV1(uint32_t arg__version, uint32_t arg__runTrigDelay, uint32_t arg__daqTrigDelay, uint32_t arg__dacSetting, uint8_t arg__asicGR, uint8_t arg__asicAcq, uint8_t arg__asicR0, uint8_t arg__asicPpmat, uint8_t arg__asicPpbe, uint8_t arg__asicRoClk, uint8_t arg__asicGRControl, uint8_t arg__asicAcqControl, uint8_t arg__asicR0Control, uint8_t arg__asicPpmatControl, uint8_t arg__asicPpbeControl, uint8_t arg__asicR0ClkControl, uint8_t arg__prepulseR0En, uint32_t arg__adcStreamMode, uint8_t arg__testPatternEnable, uint32_t arg__acqToAsicR0Delay, uint32_t arg__asicR0ToAsicAcq, uint32_t arg__asicAcqWidth, uint32_t arg__asicAcqLToPPmatL, uint32_t arg__asicRoClkHalfT, uint32_t arg__adcReadsPerPixel, uint32_t arg__adcClkHalfT, uint32_t arg__asicR0Width, uint32_t arg__adcPipelineDelay, uint32_t arg__prepulseR0Width, uint32_t arg__prepulseR0Delay, uint32_t arg__digitalCardId0, uint32_t arg__digitalCardId1, uint32_t arg__analogCardId0, uint32_t arg__analogCardId1, uint32_t arg__lastRowExclusions, uint32_t arg__numberOfAsicsPerRow, uint32_t arg__numberOfAsicsPerColumn, uint32_t arg__numberOfRowsPerAsic, uint32_t arg__numberOfPixelsPerAsicRow, uint32_t arg__baseClockFrequency, uint32_t arg__asicMask, const Epix::AsicConfigV1* arg__asics, const uint32_t* arg__asicPixelTestArray, const uint32_t* arg__asicPixelMaskArray)
    : _version(arg__version), _runTrigDelay(arg__runTrigDelay), _daqTrigDelay(arg__daqTrigDelay), _dacSetting(arg__dacSetting), _asicPins(((arg__asicGR) & 0x1)|(((arg__asicAcq) & 0x1)<<1)|(((arg__asicR0) & 0x1)<<2)|(((arg__asicPpmat) & 0x1)<<3)|(((arg__asicPpbe) & 0x1)<<4)|(((arg__asicRoClk) & 0x1)<<5)), _asicControls(((arg__asicGRControl) & 0x1)|(((arg__asicAcqControl) & 0x1)<<1)|(((arg__asicR0Control) & 0x1)<<2)|(((arg__asicPpmatControl) & 0x1)<<3)|(((arg__asicPpbeControl) & 0x1)<<4)|(((arg__asicR0ClkControl) & 0x1)<<5)|(((arg__prepulseR0En) & 0x1)<<6)|(((arg__adcStreamMode) & 0x1)<<7)|(((arg__testPatternEnable) & 0x1)<<8)), _acqToAsicR0Delay(arg__acqToAsicR0Delay), _asicR0ToAsicAcq(arg__asicR0ToAsicAcq), _asicAcqWidth(arg__asicAcqWidth), _asicAcqLToPPmatL(arg__asicAcqLToPPmatL), _asicRoClkHalfT(arg__asicRoClkHalfT), _adcReadsPerPixel(arg__adcReadsPerPixel), _adcClkHalfT(arg__adcClkHalfT), _asicR0Width(arg__asicR0Width), _adcPipelineDelay(arg__adcPipelineDelay), _prepulseR0Width(arg__prepulseR0Width), _prepulseR0Delay(arg__prepulseR0Delay), _digitalCardId0(arg__digitalCardId0), _digitalCardId1(arg__digitalCardId1), _analogCardId0(arg__analogCardId0), _analogCardId1(arg__analogCardId1), _lastRowExclusions(arg__lastRowExclusions), _numberOfAsicsPerRow(arg__numberOfAsicsPerRow), _numberOfAsicsPerColumn(arg__numberOfAsicsPerColumn), _numberOfRowsPerAsic(arg__numberOfRowsPerAsic), _numberOfPixelsPerAsicRow(arg__numberOfPixelsPerAsicRow), _baseClockFrequency(arg__baseClockFrequency), _asicMask(arg__asicMask)
{
  if (arg__asics and (this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())) {
    ptrdiff_t offset = 112;
    Epix::AsicConfigV1* data = reinterpret_cast<Epix::AsicConfigV1*>(((char*)this)+offset);
    std::copy(arg__asics, arg__asics+(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()), data);
  }
  if (arg__asicPixelTestArray and (((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow()+31)/32))) {
    ptrdiff_t offset = 112+(84*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()));
    uint32_t* data = reinterpret_cast<uint32_t*>(((char*)this)+offset);
    std::copy(arg__asicPixelTestArray, arg__asicPixelTestArray+(((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow()+31)/32)), data);
  }
  if (arg__asicPixelMaskArray and (((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow()+31)/32))) {
    ptrdiff_t offset = (112+(84*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())))+(4*(((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow()+31)/32)));
    uint32_t* data = reinterpret_cast<uint32_t*>(((char*)this)+offset);
    std::copy(arg__asicPixelMaskArray, arg__asicPixelMaskArray+(((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow()+31)/32)), data);
  }
}
std::vector<int>
ConfigV1::asics_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn());
  return shape;
}
Asic10kConfigV1::Asic10kConfigV1(uint8_t arg__CompTH_DAC, uint8_t arg__CompEn_0, uint8_t arg__PulserSync, uint8_t arg__dummyTest, uint8_t arg__dummyMask, uint8_t arg__dummyG, uint8_t arg__dummyGA, uint16_t arg__dummyUpper12bits, uint16_t arg__pulser, uint8_t arg__pbit, uint8_t arg__atest, uint8_t arg__test, uint8_t arg__sabTest, uint8_t arg__hrTest, uint8_t arg__PulserR, uint8_t arg__digMon1, uint8_t arg__digMon2, uint8_t arg__pulserDac, uint8_t arg__monostPulser, uint8_t arg__CompEn_1, uint8_t arg__CompEn_2, uint8_t arg__Dm1En, uint8_t arg__Dm2En, uint8_t arg__emph_bd, uint8_t arg__emph_bc, uint8_t arg__VRefDac, uint8_t arg__VrefLow, uint8_t arg__TpsTComp, uint8_t arg__TpsMux, uint8_t arg__RoMonost, uint8_t arg__TpsGr, uint8_t arg__S2dGr, uint8_t arg__PpOcbS2d, uint8_t arg__Ocb, uint8_t arg__Monost, uint8_t arg__FastppEnable, uint8_t arg__Preamp, uint8_t arg__PixelCb, uint8_t arg__Vld1_b, uint8_t arg__S2dTComp, uint8_t arg__FilterDac, uint8_t arg__testVDTransmitter, uint8_t arg__TC, uint8_t arg__S2d, uint8_t arg__S2dDacBias, uint8_t arg__TpsTcDac, uint8_t arg__TpsDac, uint8_t arg__S2dTcDac, uint8_t arg__S2dDac, uint8_t arg__TestBe, uint8_t arg__IsEn, uint8_t arg__DelExec, uint8_t arg__DelCckReg, uint8_t arg__RO_rst_en, uint8_t arg__slvdSBit, uint8_t arg__FELmode, uint8_t arg__CompEnOn, uint16_t arg__RowStartAddr, uint16_t arg__RowStopAddr, uint8_t arg__ColStartAddr, uint8_t arg__ColStopAddr, uint16_t arg__chipID)
    : _reg1(((arg__CompTH_DAC) & 0x3f)|(((arg__CompEn_0) & 0x1)<<6)|(((arg__PulserSync) & 0x1)<<7)), _reg2(((arg__dummyTest) & 0x1)|(((arg__dummyMask) & 0x1)<<1)|(((arg__dummyG) & 0x1)<<2)|(((arg__dummyGA) & 0x1)<<3)|(((arg__dummyUpper12bits) & 0xfff)<<4)), _reg3(((arg__pulser) & 0x3ff)|(((arg__pbit) & 0x1)<<10)|(((arg__atest) & 0x1)<<11)|(((arg__test) & 0x1)<<12)|(((arg__sabTest) & 0x1)<<13)|(((arg__hrTest) & 0x1)<<14)|(((arg__PulserR) & 0x1)<<15)), _reg4(((arg__digMon1) & 0xf)|(((arg__digMon2) & 0xf)<<4)), _reg5(((arg__pulserDac) & 0x7)|(((arg__monostPulser) & 0x7)<<3)|(((arg__CompEn_1) & 0x1)<<6)|(((arg__CompEn_2) & 0x1)<<7)), _reg6(((arg__Dm1En) & 0x1)|(((arg__Dm2En) & 0x1)<<1)|(((arg__emph_bd) & 0x7)<<2)|(((arg__emph_bc) & 0x7)<<5)), _reg7(((arg__VRefDac) & 0x3f)|(((arg__VrefLow) & 0x3)<<6)), _reg8(((arg__TpsTComp) & 0x1)|(((arg__TpsMux) & 0xf)<<1)|(((arg__RoMonost) & 0x7)<<5)), _reg9(((arg__TpsGr) & 0xf)|(((arg__S2dGr) & 0xf)<<4)), _reg10(((arg__PpOcbS2d) & 0x1)|(((arg__Ocb) & 0x7)<<1)|(((arg__Monost) & 0x7)<<4)|(((arg__FastppEnable) & 0x1)<<7)), _reg11(((arg__Preamp) & 0x7)|(((arg__PixelCb) & 0x7)<<3)|(((arg__Vld1_b) & 0x3)<<6)), _reg12(((arg__S2dTComp) & 0x1)|(((arg__FilterDac) & 0x3f)<<1)|(((arg__testVDTransmitter) & 0x1)<<7)), _reg13(((arg__TC) & 0x3)|(((arg__S2d) & 0x7)<<2)|(((arg__S2dDacBias) & 0x7)<<5)), _reg14(((arg__TpsTcDac) & 0x3)|(((arg__TpsDac) & 0x3f)<<2)), _reg15(((arg__S2dTcDac) & 0x3)|(((arg__S2dDac) & 0x3f)<<2)), _reg16(((arg__TestBe) & 0x1)|(((arg__IsEn) & 0x1)<<1)|(((arg__DelExec) & 0x1)<<2)|(((arg__DelCckReg) & 0x1)<<3)|(((arg__RO_rst_en) & 0x1)<<4)|(((arg__slvdSBit) & 0x1)<<5)|(((arg__FELmode) & 0x1)<<6)|(((arg__CompEnOn) & 0x1)<<7)), _reg17(((arg__RowStartAddr) & 0x1ff)), _reg18(((arg__RowStopAddr) & 0x1ff)), _reg19(((arg__ColStartAddr) & 0x7f)), _reg20(((arg__ColStopAddr) & 0x7f)), _reg21(((arg__chipID) & 0xffff))
{
}
Config10KV1::Config10KV1(uint32_t arg__version, uint32_t arg__runTrigDelay, uint32_t arg__daqTrigDelay, uint32_t arg__dacSetting, uint8_t arg__asicGR, uint8_t arg__asicAcq, uint8_t arg__asicR0, uint8_t arg__asicPpmat, uint8_t arg__asicPpbe, uint8_t arg__asicRoClk, uint8_t arg__asicGRControl, uint8_t arg__asicAcqControl, uint8_t arg__asicR0Control, uint8_t arg__asicPpmatControl, uint8_t arg__asicPpbeControl, uint8_t arg__asicR0ClkControl, uint8_t arg__prepulseR0En, uint32_t arg__adcStreamMode, uint8_t arg__testPatternEnable, uint8_t arg__SyncMode, uint8_t arg__R0Mode, uint32_t arg__DoutPipelineDelay, uint32_t arg__acqToAsicR0Delay, uint32_t arg__asicR0ToAsicAcq, uint32_t arg__asicAcqWidth, uint32_t arg__asicAcqLToPPmatL, uint32_t arg__asicRoClkHalfT, uint32_t arg__adcReadsPerPixel, uint32_t arg__adcClkHalfT, uint32_t arg__asicR0Width, uint32_t arg__adcPipelineDelay, uint16_t arg__SyncWidth, uint16_t arg__SyncDelay, uint32_t arg__prepulseR0Width, uint32_t arg__prepulseR0Delay, uint32_t arg__digitalCardId0, uint32_t arg__digitalCardId1, uint32_t arg__analogCardId0, uint32_t arg__analogCardId1, uint32_t arg__lastRowExclusions, uint32_t arg__numberOfAsicsPerRow, uint32_t arg__numberOfAsicsPerColumn, uint32_t arg__numberOfRowsPerAsic, uint32_t arg__numberOfPixelsPerAsicRow, uint32_t arg__baseClockFrequency, uint32_t arg__asicMask, uint8_t arg__scopeEnable, uint8_t arg__scopeTrigEdge, uint8_t arg__scopeTrigChan, uint8_t arg__scopeArmMode, uint16_t arg__scopeADCThreshold, uint16_t arg__scopeTrigHoldoff, uint16_t arg__scopeTrigOffset, uint16_t arg__scopeTraceLength, uint16_t arg__scopeADCsameplesToSkip, uint8_t arg__scopeChanAwaveformSelect, uint8_t arg__scopeChanBwaveformSelect, const Epix::Asic10kConfigV1* arg__asics, const uint16_t* arg__asicPixelConfigArray)
    : _version(arg__version), _runTrigDelay(arg__runTrigDelay), _daqTrigDelay(arg__daqTrigDelay), _dacSetting(arg__dacSetting), _asicPins(((arg__asicGR) & 0x1)|(((arg__asicAcq) & 0x1)<<1)|(((arg__asicR0) & 0x1)<<2)|(((arg__asicPpmat) & 0x1)<<3)|(((arg__asicPpbe) & 0x1)<<4)|(((arg__asicRoClk) & 0x1)<<5)), _asicControls(((arg__asicGRControl) & 0x1)|(((arg__asicAcqControl) & 0x1)<<1)|(((arg__asicR0Control) & 0x1)<<2)|(((arg__asicPpmatControl) & 0x1)<<3)|(((arg__asicPpbeControl) & 0x1)<<4)|(((arg__asicR0ClkControl) & 0x1)<<5)|(((arg__prepulseR0En) & 0x1)<<6)|(((arg__adcStreamMode) & 0x1)<<7)|(((arg__testPatternEnable) & 0x1)<<8)|(((arg__SyncMode) & 0x3)<<9)|(((arg__R0Mode) & 0x1)<<11)), _DoutPipelineDelay(arg__DoutPipelineDelay), _acqToAsicR0Delay(arg__acqToAsicR0Delay), _asicR0ToAsicAcq(arg__asicR0ToAsicAcq), _asicAcqWidth(arg__asicAcqWidth), _asicAcqLToPPmatL(arg__asicAcqLToPPmatL), _asicRoClkHalfT(arg__asicRoClkHalfT), _adcReadsPerPixel(arg__adcReadsPerPixel), _adcClkHalfT(arg__adcClkHalfT), _asicR0Width(arg__asicR0Width), _adcPipelineDelay(arg__adcPipelineDelay), _Sync(((arg__SyncWidth) & 0xffff)|(((arg__SyncDelay) & 0xffff)<<16)), _prepulseR0Width(arg__prepulseR0Width), _prepulseR0Delay(arg__prepulseR0Delay), _digitalCardId0(arg__digitalCardId0), _digitalCardId1(arg__digitalCardId1), _analogCardId0(arg__analogCardId0), _analogCardId1(arg__analogCardId1), _lastRowExclusions(arg__lastRowExclusions), _numberOfAsicsPerRow(arg__numberOfAsicsPerRow), _numberOfAsicsPerColumn(arg__numberOfAsicsPerColumn), _numberOfRowsPerAsic(arg__numberOfRowsPerAsic), _numberOfPixelsPerAsicRow(arg__numberOfPixelsPerAsicRow), _baseClockFrequency(arg__baseClockFrequency), _asicMask(arg__asicMask), _Scope(((arg__scopeEnable) & 0x1)|(((arg__scopeTrigEdge) & 0x1)<<1)|(((arg__scopeTrigChan) & 0xf)<<2)|(((arg__scopeArmMode) & 0x3)<<6)|(((arg__scopeADCThreshold) & 0xffff)<<16)), _ScopeTriggerParms_1(((arg__scopeTrigHoldoff) & 0x1fff)|(((arg__scopeTrigOffset) & 0x1fff)<<13)), _ScopeTriggerParms_2(((arg__scopeTraceLength) & 0x1fff)|(((arg__scopeADCsameplesToSkip) & 0x1fff)<<13)), _ScopeWaveformSelects(((arg__scopeChanAwaveformSelect) & 0x1f)|(((arg__scopeChanBwaveformSelect) & 0x1f)<<5))
{
  if (arg__asics and (this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())) {
    ptrdiff_t offset = 136;
    Epix::Asic10kConfigV1* data = reinterpret_cast<Epix::Asic10kConfigV1*>(((char*)this)+offset);
    std::copy(arg__asics, arg__asics+(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()), data);
  }
  if (arg__asicPixelConfigArray and (((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow())))) {
    ptrdiff_t offset = 136+(84*(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn()));
    uint16_t* data = reinterpret_cast<uint16_t*>(((char*)this)+offset);
    std::copy(arg__asicPixelConfigArray, arg__asicPixelConfigArray+(((this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn())*( this->numberOfRowsPerAsic()))*( (this->numberOfPixelsPerAsicRow()))), data);
  }
}
std::vector<int>
Config10KV1::asics_shape() const {
  std::vector<int> shape;
  shape.reserve(1);
  shape.push_back(this->numberOfAsicsPerRow()*this->numberOfAsicsPerColumn());
  return shape;
}
} // namespace Epix
} // namespace Pds
