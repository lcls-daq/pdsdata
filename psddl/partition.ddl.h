#ifndef PDS_PARTITION_DDL_H
#define PDS_PARTITION_DDL_H 1

// *** Do not edit this file, it is auto-generated ***

#include <vector>
#include <iosfwd>
#include <cstddef>
#include <cstring>
#include "pdsdata/xtc/TypeId.hh"
#include "ndarray/ndarray.h"
#include "pdsdata/xtc/Src.hh"
namespace Pds {
namespace Partition {

/** @class Segment

  
*/

#pragma pack(push,4)

class Segment {
public:
  Segment(const Pds::Src& arg__src, uint32_t arg__group);
  Segment() {}
  const Pds::Src& src() const { return _src; }
  uint32_t group() const { return _group; }
  static uint32_t _sizeof() { return (((((0+(Pds::Src::_sizeof()))+4)+4)-1)/4)*4; }
private:
  Pds::Src	_src;
  uint32_t	_group;
};
#pragma pack(pop)

/** @class ConfigV1

  
*/


class ConfigV1 {
public:
  enum { TypeId = Pds::TypeId::Id_PartitionConfig /**< XTC type ID value (from Pds::TypeId class) */ };
  enum { Version = 1 /**< XTC type version number */ };
  ConfigV1(uint64_t arg__bldMask, uint32_t arg__numSegments, const Partition::Segment* arg__segments);
  ConfigV1() {}
  ConfigV1(const ConfigV1& other) {
    const char* src = reinterpret_cast<const char*>(&other);
    std::copy(src, src+other._sizeof(), reinterpret_cast<char*>(this));
  }
  ConfigV1& operator=(const ConfigV1& other) {
    const char* src = reinterpret_cast<const char*>(&other);
    std::copy(src, src+other._sizeof(), reinterpret_cast<char*>(this));
    return *this;
  }
  /** Mask of requested BLD */
  uint64_t bldMask() const { return _bldMask; }
  /** Number of segment definitions */
  uint32_t numSegments() const { return _numSegments; }
  /** Segment configuration objects

    Note: this overloaded method accepts shared pointer argument which must point to an object containing
    this instance, the returned ndarray object can be used even after this instance disappears. */
  template <typename T>
  ndarray<const Partition::Segment, 1> segments(const boost::shared_ptr<T>& owner) const { 
    ptrdiff_t offset=12;
    const Partition::Segment* data = (const Partition::Segment*)(((char*)this)+offset);
    return make_ndarray(boost::shared_ptr<const Partition::Segment>(owner, data), this->numSegments());
  }
  /** Segment configuration objects

    Note: this method returns ndarray instance which does not control lifetime
    of the data, do not use returned ndarray after this instance disappears. */
  ndarray<const Partition::Segment, 1> segments() const { ptrdiff_t offset=12;
  const Partition::Segment* data = (const Partition::Segment*)(((char*)this)+offset);
  return make_ndarray(data, this->numSegments()); }
  uint32_t _sizeof() const { return ((((12+(Partition::Segment::_sizeof()*(this->numSegments())))+8)-1)/8)*8; }
private:
  uint64_t	_bldMask;	/**< Mask of requested BLD */
  uint32_t	_numSegments;	/**< Number of segment definitions */
  //Partition::Segment	_segments[this->numSegments()];
};
} // namespace Partition
} // namespace Pds
#endif // PDS_PARTITION_DDL_H
